#!/bin/bash
## MCMC config script

# inputs
while getopts b:cm:o:p option; do
    case "${option}" in
        b) MCMC_BUILD=${OPTARG};;
        c) MCMC_COVERAGE="y";;
        m) MCMC_MATRIX_OPS=${OPTARG};;
        o) MCMC_OPT=${OPTARG};;
        p) MCMC_PARALLEL="y";;
    esac
done

if [ -z ${CC+x} ]; then 
    CC=gcc
fi
if [ -z ${CXX+x} ]; then 
    CXX=g++
fi
if [ -z ${FC+x} ]; then 
    FC=gfortran
fi

if [[ !(-z ${KEITH_DEV_SETTINGS+x}) ]]; then
    CC=gcc-mp-7
    CXX=g++-mp-7
    FC=gfortran-mp-7
fi

# announcements

echo ""
if [[ "${MCMC_BUILD}" == "dev" ]]; then
    echo "MCMC: dev version"
fi

if [[ "${MCMC_COVERAGE}" == "y" ]]; then 
    echo "MCMC: coverage build"
fi

# get working directory
WDIR=${PWD}

# look for Armadillo
if [ -z ${ARMA_INCLUDE_PATH+x} ]; then
    echo ""
    echo "MCMC: ARMA_INCLUDE_PATH not set"
    if [ -f ${WDIR}/include/armadillo ]; then 
        ARMA_INCLUDE_PATH="./include"
    elif [ -f /usr/include/armadillo ]; then
        ARMA_INCLUDE_PATH="/usr/include"
    elif [ -f /usr/local/include/armadillo ]; then
        ARMA_INCLUDE_PATH="/usr/local/include"
    elif [ -f /opt/include/armadillo ]; then
        ARMA_INCLUDE_PATH="/opt/include"
    elif [ -f /opt/local/include/armadillo ]; then
        ARMA_INCLUDE_PATH="/opt/local/include"
    else 
        echo "MCMC: cannot find armadillo files. Cloning from GitHub"
        echo ""

        mkdir ${WDIR}/arma_tmp
        git clone -b unstable --single-branch https://github.com/conradsnicta/armadillo-code ${WDIR}/arma_tmp
        mv ${WDIR}/arma_tmp/include/* ${WDIR}/include
        rm -rf ${WDIR}/arma_tmp
        ARMA_INCLUDE_PATH="./include"

        echo ""
    fi
fi
echo "MCMC: ARMA_INCLUDE_PATH set to ${ARMA_INCLUDE_PATH}"

# set build and optimization flags
if [[ "${MCMC_COVERAGE}" == "y" ]]; then 
    MCMC_OPT_FLAGS="-g -O0 -Wall --coverage -fno-inline -fno-inline-small-functions -fno-default-inline"
else
    if [[ "${MCMC_OPT}" == "fast" ]]; then
        echo "MCMC: experimental optimization"
        MCMC_OPT_FLAGS="-Ofast -Wall -march=native"
    else
        MCMC_OPT_FLAGS="-O3 -Wall"
    fi

    if [[ "${MCMC_PARALLEL}" == "y" ]]; then
        echo "MCMC: using OpenMP"
        MCMC_OPT_FLAGS="${MCMC_OPT_FLAGS} -fopenmp -DMCMC_USE_OMP"
    fi
fi

# shared library names
MCMC_SHLIB_NAME="libmcmc.so"

if [[ !("${MCMC_BUILD}" == "dev") ]]; then
    if [ -z ${MCMC_INSTALL_PATH+x} ]; then
        MCMC_INSTALL_PATH="/usr/local"
    fi
    echo ""
    echo "MCMC: install path set to ${MCMC_INSTALL_PATH}"
fi

if [[ $OSTYPE == darwin* ]] ; then
    if [[ "${MCMC_BUILD}" == "dev" ]]; then
        MCMC_SHLIB_FLAGS="-dynamiclib -install_name ${WDIR}/${MCMC_SHLIB_NAME} -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress"
    else
        MCMC_SHLIB_FLAGS="-dynamiclib -install_name ${MCMC_INSTALL_PATH}/lib/${MCMC_SHLIB_NAME} -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress"
    fi

    MCMC_BLAS_LAPACK="-framework Accelerate"
elif [[ $OSTYPE == *linux* ]] ; then
    MCMC_OPT_FLAGS="-fPIC ${MCMC_OPT_FLAGS}"

    if [[ "${MCMC_BUILD}" == "dev" ]]; then
        MCMC_SHLIB_FLAGS="-fPIC -shared -L${WDIR} -Wl,-Bsymbolic-functions -Wl,-z,relro "
    else
        MCMC_SHLIB_FLAGS="-fPIC -shared -L${MCMC_INSTALL_PATH}/lib -Wl,-Bsymbolic-functions -Wl,-z,relro"
    fi

    MCMC_BLAS_LAPACK="-lblas -llapack"
else
    MCMC_BLAS_LAPACK="-lblas -llapack"
fi

if [[ !(-z ${MCMC_MATRIX_OPS+x}) ]]; then
    MCMC_BLAS_LAPACK="${MCMC_MATRIX_OPS}"
    echo ""
    echo "MCMC: BLAS and Lapack libraries set to ${MCMC_BLAS_LAPACK}"
fi

if [[ "${MCMC_COVERAGE}" == "y" ]]; then 
    MCMC_SHLIB_FLAGS="--coverage ${MCMC_SHLIB_FLAGS}"
else
    MCMC_SHLIB_FLAGS="-O3 ${MCMC_SHLIB_FLAGS}"
fi

if [[ "${MCMC_PARALLEL}" == "y" ]]; then 
    MCMC_SHLIB_FLAGS="-fopenmp ${MCMC_SHLIB_FLAGS}"
fi

sed -e "s|@CC@|${CC}|" \
    -e "s|@CXX@|${CXX}|" \
    -e "s|@FC@|${FC}|" \
    -e "s|@ARMA_INCLUDE_PATH@|${ARMA_INCLUDE_PATH}|" \
    -e "s|@MCMC_BLAS_LAPACK@|${MCMC_BLAS_LAPACK}|" \
    -e "s|@MCMC_OPT_FLAGS@|${MCMC_OPT_FLAGS}|" \
    -e "s|@MCMC_SHLIB_NAME@|${MCMC_SHLIB_NAME}|" \
    -e "s|@MCMC_SHLIB_FLAGS@|${MCMC_SHLIB_FLAGS}|" \
    -e "s|@MCMC_INSTALL_PATH@|${MCMC_INSTALL_PATH}|" \
    Makefile.in > Makefile
