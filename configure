#!/bin/bash
## MCMC config script

function print_help
{
    # echo "" ;
    echo -e "\x1B[32mConfigure options:\033[0m" >&2 ;
    echo "" ;
    echo "-c    Coverage build" ;
    echo "-d    Development build (install paths set to current directory)" ;
    echo "-g    Debugging build (optimization flags set to -O0 -g)" ;
    echo "-h    Print help" ;
    echo "-m    Specify the BLAS and Lapack libraries to link against" ; 
    echo "        Examples: -m \"-lopenblas\" or -m \"-framework Accelerate\"" ;
    echo "-o    Compiler optimization options; defaults to:" ;
    echo "        -O3 -march=native -ffp-contract=fast -flto -DARMA_NO_DEBUG" ;
    echo "-p    Enable OpenMP parallelization features" ;
}

while getopts hcdgm:o:p option; do
    case "${option}" in
        h) print_help; exit 2;;
        c) MCMC_COVERAGE="y";;
        d) MCMC_BUILD="dev";;
        g) MCMC_DEBUG="y";;
        m) MCMC_MATRIX_OPS=${OPTARG};;
        o) MCMC_OPT=${OPTARG};;
        p) MCMC_PARALLEL="y";;
        ?) print_help; exit 2;;
    esac
done

if [ -z ${CC+x} ]; then 
    CC=gcc
fi
if [ -z ${CXX+x} ]; then 
    CXX=g++
fi
if [ -z ${FC+x} ]; then 
    FC=gfortran
fi

# compiler checks

IS_DARWIN=$($CXX -dumpmachine 2>&1 | grep -i -c "darwin")
GCC_COMPILER=$($CXX --version 2>&1 | grep -i -c -E "gcc")
# APPLE_COMPILER=$($CXX --version 2>&1 | grep -i -c -E 'apple llvm')

# announcements

echo ""
if [[ "${MCMC_BUILD}" == "dev" ]]; then
    echo "MCMC: dev version"
fi

if [[ "${MCMC_COVERAGE}" == "y" ]]; then 
    echo "MCMC: coverage build"
fi

# get working directory
WDIR=${PWD}

if [ -z ${ARMA_INCLUDE_PATH+x} ]; then
    
    declare -a ARMA_DIRS=("${WDIR}/include" "/usr/include" "/usr/local/include" "/opt/include" "/opt/local/include")
    ARMA_INCLUDE_PATH=

    for i in "${ARMA_DIRS[@]}"; do
        if [ -f "$i"/armadillo ]; then 
            ARMA_INCLUDE_PATH="$i"
            break
        fi
    done

    if [[ $ARMA_INCLUDE_PATH == "" ]]; then
        echo ""
        echo "MCMC: cannot find armadillo files. Cloning from GitHub"
        echo ""

        mkdir ${WDIR}/arma_tmp
        git clone -b unstable --single-branch https://github.com/conradsnicta/armadillo-code ${WDIR}/arma_tmp
        mv ${WDIR}/arma_tmp/include/* ${WDIR}/include
        rm -rf ${WDIR}/arma_tmp
        ARMA_INCLUDE_PATH="./include"

        echo ""
    fi
fi

echo "MCMC: ARMA_INCLUDE_PATH set to: ${ARMA_INCLUDE_PATH}"

# set build and optimization flags

if [[ "${MCMC_COVERAGE}" == "y" ]]; then 
    MCMC_OPT_FLAGS="-g -O0 -Wall --coverage -fno-inline -fno-inline-small-functions -fno-default-inline"
else
    if [[ "${MCMC_OPT}" == "" ]]; then
        # MCMC_OPT_FLAGS="-Ofast -march=native -DARMA_NO_DEBUG"
        # echo "MCMC: experimental optimization; use of NaN or +/-Inf not recognized"
        MCMC_OPT_FLAGS="-O3 -march=native -ffp-contract=fast -flto -DARMA_NO_DEBUG"
    else
        MCMC_OPT_FLAGS="${MCMC_OPT}"
    fi

    if [[ "${MCMC_PARALLEL}" == "y" ]]; then
        echo "MCMC: using OpenMP"
        MCMC_OPT_FLAGS="${MCMC_OPT_FLAGS} -fopenmp"
    fi
fi

MCMC_WARN_FLAGS="-Wall"

# shared library name and install path

MCMC_SHLIB_NAME="libmcmc.so"

if [[ !("${MCMC_BUILD}" == "dev") ]]; then
    if [ -z ${MCMC_INSTALL_PATH+x} ]; then
        MCMC_INSTALL_PATH="/usr/local"
    fi
    echo ""
    echo "MCMC: install path set to: ${MCMC_INSTALL_PATH}"
fi

if [[ $OSTYPE == darwin* ]] ; then
    if [[ "${MCMC_BUILD}" == "dev" ]]; then
        MCMC_SHLIB_FLAGS="-dynamiclib -install_name ${WDIR}/${MCMC_SHLIB_NAME} -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress"
    else
        MCMC_SHLIB_FLAGS="-dynamiclib -install_name ${MCMC_INSTALL_PATH}/lib/${MCMC_SHLIB_NAME} -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress"
    fi

    MCMC_BLAS_LAPACK="-framework Accelerate"
elif [[ $OSTYPE == *linux* ]] ; then
    MCMC_OPT_FLAGS="-fPIC ${MCMC_OPT_FLAGS}"

    if [[ "${MCMC_BUILD}" == "dev" ]]; then
        MCMC_SHLIB_FLAGS="-fPIC -shared -L${WDIR} -Wl,-Bsymbolic-functions -Wl,-z,relro "
    else
        MCMC_SHLIB_FLAGS="-fPIC -shared -L${MCMC_INSTALL_PATH}/lib -Wl,-Bsymbolic-functions -Wl,-z,relro"
    fi

    MCMC_BLAS_LAPACK="-lblas -llapack"
else
    MCMC_BLAS_LAPACK="-lblas -llapack"
fi

if [[ !(-z ${MCMC_MATRIX_OPS+x}) ]]; then
    MCMC_BLAS_LAPACK="${MCMC_MATRIX_OPS}"
    echo ""
    echo "MCMC: BLAS and Lapack libraries set to ${MCMC_BLAS_LAPACK}"
fi

if [ "$IS_DARWIN" -eq "1" ] && [ "$GCC_COMPILER" -eq "1" ]; then
    echo ""
    echo "MCMC: To enable AVX features, your compiler will use the Apple LLVM assembler"
    MCMC_OPT_FLAGS="-Wa,-q ${MCMC_OPT_FLAGS}"
fi

# final optimization checks

if [[ "${MCMC_DEBUG}" == "y" ]]; then
    MCMC_OPT_FLAGS="-O0 -g"
fi

if [[ "${MCMC_COVERAGE}" == "y" ]]; then 
    MCMC_SHLIB_FLAGS="--coverage ${MCMC_SHLIB_FLAGS}"
else
    MCMC_SHLIB_FLAGS="${MCMC_OPT_FLAGS} ${MCMC_SHLIB_FLAGS}"
fi

echo "MCMC: optimization flags set to: ${MCMC_OPT_FLAGS}"

# end

echo ""

sed -e "s|@CC@|${CC}|" \
    -e "s|@CXX@|${CXX}|" \
    -e "s|@FC@|${FC}|" \
    -e "s|@ARMA_INCLUDE_PATH@|${ARMA_INCLUDE_PATH}|" \
    -e "s|@MCMC_BLAS_LAPACK@|${MCMC_BLAS_LAPACK}|" \
    -e "s|@MCMC_WARN_FLAGS@|${MCMC_WARN_FLAGS}|" \
    -e "s|@MCMC_OPT_FLAGS@|${MCMC_OPT_FLAGS}|" \
    -e "s|@MCMC_SHLIB_NAME@|${MCMC_SHLIB_NAME}|" \
    -e "s|@MCMC_SHLIB_FLAGS@|${MCMC_SHLIB_FLAGS}|" \
    -e "s|@MCMC_INSTALL_PATH@|${MCMC_INSTALL_PATH}|" \
    Makefile.in > Makefile
