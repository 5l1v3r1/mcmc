#!/bin/bash
## MCMC tests config script

while getopts cdgm:o:p option; do
    case "${option}" in
        c) MCMC_COVERAGE="y";;
        d) MCMC_BUILD="dev";;
        g) MCMC_DEBUG="y";;
        m) MCMC_MATRIX_OPS=${OPTARG};;
        o) MCMC_OPT=${OPTARG};;
        p) MCMC_PARALLEL="y";;
    esac
done

if [ -z ${CC+x} ]; then 
    CC=gcc
fi
if [ -z ${CXX+x} ]; then 
    CXX=g++
fi
if [ -z ${FC+x} ]; then 
    FC=gfortran
fi

# compiler checks

IS_DARWIN=$($CXX -dumpmachine 2>&1 | grep -i -c "darwin")
GCC_COMPILER=$($CXX --version 2>&1 | grep -i -c -E "gcc")

#

WDIR=${PWD}

if [ -z ${ARMA_INCLUDE_PATH+x} ]; then
    
    declare -a ARMA_DIRS=("${WDIR}/../../include" "/usr/include" "/usr/local/include" "/opt/include" "/opt/local/include")
    ARMA_INCLUDE_PATH=

    for i in "${ARMA_DIRS[@]}"; do
        if [ -f "$i"/armadillo ]; then 
            ARMA_INCLUDE_PATH="$i"
            break
        fi
    done

    if [[ $ARMA_INCLUDE_PATH == "" ]]; then
        echo "MCMC tests: cannot find the armadillo library."
        echo ""
        exit 1
    fi
fi

echo "MCMC tests: ARMA_INCLUDE_PATH set to ${ARMA_INCLUDE_PATH}"

# coverage build? used for codecov

if [[ "${MCMC_COVERAGE}" == "y" ]]; then 
    MCMC_OPT_FLAGS="-g -O0 -Wall --coverage -fno-inline -fno-inline-small-functions -fno-default-inline"
else
    if [[ "${MCMC_OPT}" == "" ]]; then
        MCMC_OPT_FLAGS="-O3 -march=native -ffp-contract=fast -DARMA_NO_DEBUG"
    else
        MCMC_OPT_FLAGS="${MCMC_OPT}"
    fi

    if [[ "${MCMC_PARALLEL}" == "y" ]]; then
        echo "MCMC: using OpenMP"
        MCMC_OPT_FLAGS="${MCMC_OPT_FLAGS} -fopenmp -DMCMC_USE_OMP"
    fi
fi

MCMC_WARN_FLAGS="-Wall"

#

MCMC_SHLIB_NAME="mcmc"

# dev build

if [[ "${MCMC_BUILD}" == "dev" ]]; then
    echo "MCMC: dev version"
    cd ../..
    MCMC_INCLUDE_PATH=${PWD}/include
    MCMC_INSTALL_PATH=${PWD}
    cd ${WDIR}
else
    MCMC_INCLUDE_PATH="."
    MCMC_INSTALL_PATH="/usr/local/lib"
fi

# BLAS and LAPACK settings

if [[ $OSTYPE == darwin* ]] ; then
    MCMC_BLAS_LAPACK="-framework Accelerate"
elif [[ $OSTYPE == *linux* ]] ; then
    MCMC_BLAS_LAPACK="-lblas -llapack"
else
    MCMC_BLAS_LAPACK="-lblas -llapack"
fi

#

if [[ !(-z ${MCMC_MATRIX_OPS+x}) ]]; then
    MCMC_BLAS_LAPACK="${MCMC_MATRIX_OPS}"
    echo ""
    echo "MCMC: BLAS and Lapack libraries set to ${MCMC_BLAS_LAPACK}"
fi

if [ "$IS_DARWIN" -eq "1" ] && [ "$GCC_COMPILER" -eq "1" ]; then
    echo ""
    echo "MCMC: To enable AVX features, your compiler will use the Apple LLVM assembler"
    MCMC_OPT_FLAGS="-Wa,-q ${MCMC_OPT_FLAGS}"
fi

# final optimization checks

if [[ "${MCMC_DEBUG}" == "y" ]]; then
    MCMC_OPT_FLAGS="-O0 -g"
fi

# end

echo ""

sed -e "s|@CC@|${CC}|" \
    -e "s|@CXX@|${CXX}|" \
    -e "s|@FC@|${FC}|" \
    -e "s|@ARMA_INCLUDE_PATH@|${ARMA_INCLUDE_PATH}|" \
    -e "s|@MCMC_BLAS_LAPACK@|${MCMC_BLAS_LAPACK}|" \
    -e "s|@MCMC_WARN_FLAGS@|${MCMC_WARN_FLAGS}|" \
    -e "s|@MCMC_OPT_FLAGS@|${MCMC_OPT_FLAGS}|" \
    -e "s|@MCMC_SHLIB_NAME@|${MCMC_SHLIB_NAME}|" \
    -e "s|@MCMC_INCLUDE_PATH@|${MCMC_INCLUDE_PATH}|" \
    -e "s|@MCMC_INSTALL_PATH@|${MCMC_INSTALL_PATH}|" \
    Makefile.in > Makefile
